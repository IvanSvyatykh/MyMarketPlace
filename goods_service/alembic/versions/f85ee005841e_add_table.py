"""add table

Revision ID: f85ee005841e
Revises: 
Create Date: 2025-06-26 12:13:02.591604

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f85ee005841e'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS goods;")
    op.create_table('good_category',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=254), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='goods'
    )
    op.create_table('goods',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('price', postgresql.MONEY(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['goods.good_category.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='goods'
    )
    op.create_table('goods_photos',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('photo_url', sa.String(), nullable=False),
    sa.Column('good_id', sa.UUID(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['good_id'], ['goods.goods.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('photo_url'),
    schema='goods'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('goods_photos', schema='goods')
    op.drop_table('goods', schema='goods')
    op.drop_table('good_category', schema='goods')
    op.execute("DROP SCHEMA IF EXISTS goods CASCADE")
    # ### end Alembic commands ###
